<?php
namespace LevNevinitsin\Business\Service;

use Yii;
use app\models\Task;
use app\models\User;
use LevNevinitsin\Business\Exception\GetContractorRankException;
use LevNevinitsin\Business\Exception\GetContractorStatusException;

class UserService
{
    /**
     * Gets user's rank in the rating table generated by the query
     *
     * @param User $user
     * @return integer
     */
    public static function getRank(User $user): int
    {
        if ($user->role_id === 1) {
            throw new GetContractorRankException('User must be contractor');
        }

        $contractorsQuery = User::find()
            ->select([
                'user.id',
                'IFNULL(finished.score_sum, 0) / (IFNULL(finished.finished_count, 0) + IFNULL(failed.failed_count, 0)) AS rating'
            ])
            ->where(['role_id' => 2]);

        $finishedTasksSubquery = Task::find()
            ->select(['contractor_id, SUM(score) AS score_sum, COUNT(*) AS finished_count'])
            ->where(['task_status_id' => 5])
            ->groupBy('contractor_id');

        $failedTasksSubquery = Task::find()
            ->select(['contractor_id, COUNT(*) AS failed_count'])
            ->where(['task_status_id' => 4])
            ->groupBy('contractor_id');

        $ratingTableQuery = $contractorsQuery
            ->leftJoin(['finished' => $finishedTasksSubquery], 'finished.contractor_id = user.id')
            ->leftJoin(['failed' => $failedTasksSubquery], 'failed.contractor_id = user.id')
            ->orderBy('rating DESC');

        $contractorsRanks = $ratingTableQuery->asArray()->all();

        return array_search($user->id, array_column($contractorsRanks, 'id')) + 1;
    }

    public static function getFinishedTasksCount(User $user): int
    {
        return $user->getFinishedTasks()->count();
    }

    /**
     * Gets user's rating value
     *
     * @param User $user
     * @return float
     */
    public static function getRating(User $user): float
    {
        $scoresSum = $user->getFinishedTasks()->sum('score');
        $finishedTasksCount = self::getFinishedTasksCount($user);
        $failedTasksCount = $user->getFailedTasks()->count();
        return $scoresSum / (($finishedTasksCount + $failedTasksCount) ?: 1);
    }

    /**
     * Gets contractor status: open for new orders or busy if has order(s) in work
     *
     * @param User $user
     * @param string $busyStatus
     * @param string $freeStatus
     * @return string
     */
    public static function getStatus(
        User $user,
        string $busyStatus = 'Занят',
        string $freeStatus = 'Открыт для новых заказов'
    ): string
    {
        if ($user->role_id === 1) {
            throw new GetContractorStatusException('User must be contractor');
        }

        $hasTask = User::find()
            ->joinWith('tasks')
            ->where(['user.id' => $user->id, 'task.task_status_id' => 3])
            ->exists();

        return $hasTask ? $busyStatus : $freeStatus;
    }

    /**
     * Gets age by birthdate
     *
     * @param string $birthdate in php DateTime readable format
     * @return integer
     */
    public static function getAge(string $birthdate): int
    {
        return (int) (new \DateTime($birthdate))->diff(new \DateTime())->format('%y');
    }

    /**
     * Assign RBAC role to user
     *
     * @param User $user User instance
     * @return void
     */
    public static function assignRbacRole(User $user)
    {
        $auth = Yii::$app->authManager;
        $authorRole = $auth->getRole($user->role_id === 1 ? 'customer' : 'contractor');
        $auth->assign($authorRole, $user->id);
    }
}
